/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => StatusBarTimerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var StatusBarTimerPlugin = class extends import_obsidian.Plugin {
  // Store the ribbon icon element
  async onload() {
    console.log("Status Bar Timer Plugin loaded!");
    this.pomodoroCount = 0;
    const statusBarContainer = this.addStatusBarItem();
    statusBarContainer.createEl("span", { text: "Timer: " });
    this.statusBarText = statusBarContainer.createEl("span", { text: "00:00:00" });
    this.pomodoroCounterText = statusBarContainer.createEl("span", { text: " \u{1F345} 0" });
    this.startButton = statusBarContainer.createEl("button", { text: "Start" });
    this.startButton.addEventListener("click", () => this.startTimer());
    this.stopButton = statusBarContainer.createEl("button", { text: "Stop" });
    this.stopButton.addEventListener("click", () => this.stopTimer());
    this.stopButton.disabled = true;
    this.zenButton = statusBarContainer.createEl("button", { text: "Zen" });
    this.zenButton.addEventListener("click", () => this.toggleZenMode());
    this.ribbonIcon = this.addRibbonIcon("timer", "Start Pomodoro", () => this.openPomodoroModal());
    this.isRunning = false;
    this.pomodoroTime = 0;
    this.isZenMode = false;
  }
  startTimer() {
    if (this.isRunning)
      return;
    this.startTime = Date.now();
    this.timerInterval = window.setInterval(() => this.updateTimer(), 1e3);
    this.isRunning = true;
    this.startButton.disabled = true;
    this.stopButton.disabled = false;
  }
  stopTimer() {
    if (!this.isRunning)
      return;
    window.clearInterval(this.timerInterval);
    this.isRunning = false;
    this.startButton.disabled = false;
    this.stopButton.disabled = true;
  }
  updateTimer() {
    const elapsedTime = Date.now() - this.startTime;
    const formattedTime = this.formatTime(elapsedTime);
    this.statusBarText.setText(formattedTime);
  }
  formatTime(milliseconds) {
    const totalSeconds = Math.floor(milliseconds / 1e3);
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor(totalSeconds % 3600 / 60);
    const seconds = totalSeconds % 60;
    return `${String(hours).padStart(2, "0")}:${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}`;
  }
  toggleZenMode() {
    this.isZenMode = !this.isZenMode;
    if (this.isZenMode) {
      this.storeSplitsValues();
      this.collapseSplits();
      this.zenButton.setText("Normal");
    } else {
      this.restoreSplits();
      this.zenButton.setText("Zen");
    }
  }
  storeSplitsValues() {
    this.leftSplitCollapsed = this.app.workspace.leftSplit.collapsed;
    this.rightSplitCollapsed = this.app.workspace.rightSplit.collapsed;
  }
  collapseSplits() {
    this.app.workspace.leftSplit.collapse();
    this.app.workspace.rightSplit.collapse();
  }
  restoreSplits() {
    if (!this.leftSplitCollapsed) {
      this.app.workspace.leftSplit.expand();
    }
    if (!this.rightSplitCollapsed) {
      this.app.workspace.rightSplit.expand();
    }
  }
  openPomodoroModal() {
    const modal = new PomodoroModal(this.app, (time) => this.startPomodoro(time));
    modal.open();
  }
  startPomodoro(time) {
    this.pomodoroTime = time * 60 * 1e3;
    const endTime = Date.now() + this.pomodoroTime;
    this.pomodoroInterval = window.setInterval(() => {
      const remainingTime = endTime - Date.now();
      if (remainingTime <= 0) {
        this.stopPomodoro();
        this.incrementPomodoroCounter();
        new import_obsidian.Notice("\u0418\u043D\u0442\u0435\u0440\u0432\u0430\u043B \u0437\u0430\u043A\u043E\u043D\u0447\u0438\u043B\u0441\u044F. \u041C\u043E\u0436\u043D\u043E \u0432\u044B\u0439\u0442\u0438 \u043F\u043E\u043A\u0443\u0440\u0438\u0442\u044C");
        window.clearInterval(this.pomodoroInterval);
      } else {
        this.statusBarText.setText(this.formatTime(remainingTime));
      }
    }, 1e3);
  }
  stopPomodoro() {
    window.clearInterval(this.pomodoroInterval);
    this.statusBarText.setText("00:00:00");
  }
  incrementPomodoroCounter() {
    this.pomodoroCount++;
    this.pomodoroCounterText.setText(` \u{1F345} ${this.pomodoroCount}`);
  }
  onunload() {
    console.log("Status Bar Timer Plugin unloaded!");
    window.clearInterval(this.timerInterval);
    window.clearInterval(this.pomodoroInterval);
    if (this.isZenMode) {
      this.restoreSplits();
    }
    if (this.ribbonIcon) {
      this.ribbonIcon.remove();
    }
  }
};
var PomodoroModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Pomodoro Timer" });
    const timeSelect = contentEl.createEl("select");
    timeSelect.createEl("option", { value: "5", text: "5 \u043C\u0438\u043D\u0443\u0442" });
    timeSelect.createEl("option", { value: "10", text: "10 \u043C\u0438\u043D\u0443\u0442" });
    timeSelect.createEl("option", { value: "25", text: "25 \u043C\u0438\u043D\u0443\u0442" });
    timeSelect.createEl("option", { value: "45", text: "45 \u043C\u0438\u043D\u0443\u0442" });
    timeSelect.createEl("option", { value: "0.8", text: "\u0422\u0435\u0441\u0442 \u0434\u043B\u044F \u043F\u043E\u043A\u0430\u0437\u0430 \u0443\u0432\u0435\u0434\u043E\u043C\u043B\u0435\u043D\u0438\u044F" });
    const startButton = contentEl.createEl("button", { text: "Start" });
    startButton.addEventListener("click", () => {
      const selectedTime = parseInt(timeSelect.value);
      this.onSubmit(selectedTime);
      this.close();
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
//# sourceMappingURL=data:application/json;base64,
